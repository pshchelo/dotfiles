"=======
" SYSTEM
"=======
"maxmem=8186122
"maxmemtot=8186122
"maxmempattern=1000
set maxmempattern=5000
"=========
" BEHAVIOR
"=========
" be iMproved!
set nocompatible

" do not force to save buffers when switching to new ones
set hidden
" ignore case if search pattern is all lowercase, case-sensitive otherwise
set smartcase
" use incremental search
set incsearch

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
"
" leave the insert mode fatser on terminal
if ! has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

"==========================
" TABS, INDENTS AND FOLDING
"==========================
filetype plugin indent on
set tabstop=8
set expandtab
set softtabstop=4
set shiftwidth=4
" insert tabs on the start of a line according to shiftwidth, not tabstop
set smarttab

set foldmethod=indent
" start with all open folds
set foldlevelstart=999
set autoindent
" copy the previous indentation on autoindenting
set copyindent

" alter tab settings for C files according to Python/C suggestions
fu Select_c_style()
    if search('^\t', 'n', 150)
        set shiftwidth=8
        set noexpandtab
    el
        set shiftwidth=4
        set expandtab
    en
endf
autocmd BufRead,BufNewFile *.c,*.h call Select_c_style()
autocmd BufRead,BufNewFile Makefile* set noexpandtab

"========
" VISUALS
"========
syntax on
" Show colored border column
set colorcolumn=80
" Show line numbers
set number
" Diff shows vertical split by default
set diffopt+=vertical
" set show matching parenthesis
set showmatch
" highlight search terms
set hlsearch

" Hide the default mode text (e.g. -- INSERT -- below the statusline)
set noshowmode

" set gui options
" set guifont=Anonymous\ Pro\ for\ Powerline\ 12
set guioptions-=T  "remove toolbar
" set terminal colors
set t_Co=16

" Set interaction with system clipboard and mouse
set clipboard=unnamedplus
set mouse=a
set mousemodel=popup_setpos
" Always show status line
set laststatus=2

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" nice chars for displaying special symbols with ':set list'
set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:¶,precedes:«,extends:»

"================
" FILES AND TYPES
"================
" disable auxillary files creation
set nobackup
set noswapfile

" ignore these files when searching etc
set wildignore=*.swp,*.bak,*.pyc,*.class

" Character encoding settings
set encoding=utf-8
set fileencodings=utf-8,cp1251

" PYTHON
" Display tabs at the beginning of a line in Python mode as bad.
autocmd BufRead,BufNewFile *.py,*.pyw,*.pyx match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
autocmd BufRead,BufNewFile *.py,*.pyw*,.pyx,*.c,*.h match BadWhitespace /\s\+$/
" Trim trailing whitespace on save for Python and C files
autocmd BufWritePre *.py,*.pyw*,.pyx,*.c,*.h :%s/\s\+$//e

" RST and TXT
" Enable spell-check for RST, MD and plain text files
autocmd BufNewFile,BufRead *.{txt,rst,md} setlocal spell spelllang=en_us
" Make trailing whitespace be flagged as bad for RST files
autocmd BufRead,BufNewFile *.rst match BadWhitespace /\s\+$/
" Trim trailing whitespace on save for RST files
autocmd BufWritePre *.rst :%s/\s\+$//e

" YAML
" treat *.hot OpenStack Orchestration (Heat) templates as YAML
autocmd BufRead,BufNewFile *.hot set filetype=yaml
" set indent settings for yaml files
autocmd Filetype yaml setlocal ts=2 sw=2 expandtab
" Make trailing whitespace be flagged as bad for YAML files
autocmd BufRead,BufNewFile *.yaml,*.yml,*.hot match BadWhitespace /\s\+$/
" Trim trailing whitespace on save for YAML files
autocmd BufWritePre *.yaml,*.yml,*.hot :%s/\s\+$//e

" JSON
" Disable quote concealing in JSON files
let g:vim_json_conceal=0

" Config files
" treat *.conf files as in dosini format
autocmd BufRead,BufNewFile *.conf set filetype=dosini

"=================================
"
" AUTO CORRECT
"
"=================================
function! AutoCorrect()
    ia ixpe ipxe
    ia iXPE iPXE
    ia IMPI IPMI
    ia impi ipmi
endfunction

autocmd filetype text call AutoCorrect()
autocmd filetype rst call AutoCorrect()

if has("python3")
" define python3Version (MAJ.MIN) variable
python3 << ENDPYTHON
import sys, vim
vim.command("let python3Version = %s%s" % (str(sys.version_info.major), str(sys.version_info.minor)))
ENDPYTHON
endif

"========
"
" PLUGINS
"
"========
"=====
" Plug
"=====
call plug#begin()
" open file paths in log/debug format as file:<line>
Plug 'wsdjeg/vim-fetch'
" close files instead of closing views
Plug 'moll/vim-bbye'
" command line fuzzy file search and open
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" async ag-based search
Plug 'dyng/ctrlsf.vim'
" multiple cursors
Plug 'mg979/vim-visual-multi'
" pairs of commands
Plug 'tpope/vim-unimpaired'
" repeat full actions from plugins via .
Plug 'tpope/vim-repeat'
" work with surrounding quotes/braces/tags
Plug 'tpope/vim-surround'
" nicer (un)comment commands
Plug 'scrooloose/nerdcommenter'
" sidebar file browser + in single panel
Plug 'jistr/vim-nerdtree-tabs' | Plug 'scrooloose/nerdtree'
" use vimdiff on folders!
Plug 'will133/vim-dirdiff'
" Paste/fetch text from LodgeIt pastebins, defaults to paste.openstack.org
Plug 'pshchelo/lodgeit.vim'
" Git integration
Plug 'tpope/vim-fugitive'
" display git status per line in buffer, stage/instage hunks, integrates with vim-airline
"Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-signify'
" sidebar code structure browser, requires some ctags to be installed (e.g. universal-ctags)
Plug 'majutsushi/tagbar', { 'on':  'TagbarToggle' }
" indentation guides visualisation
Plug 'yggdroot/indentline'
" Insert or delete brackets, parens, quotes in pairs
"Plug 'jiangmiao/auto-pairs'
" shortcuts to toggle LocationList and QuickFixList
"Plug 'milkypostman/vim-togglelist'
" async linter
Plug 'dense-analysis/ale'
" general LSP integration
Plug 'prabirshrestha/vim-lsp'
" async complete
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
" async auto-complete
Plug 'maralla/completor.vim'
" better Python motion objects
Plug 'jeetsukumaran/vim-pythonsense'
" better python indentation
Plug 'vim-scripts/indentpython.vim'
" Rope-based Python code tools
" disabled for now, conflicts with Jedi, trying to compensate with other plugins
"Plug 'python-mode/python-mode', { 'branch': 'develop', 'for': 'python' }
" Jedi-based Python code completion and refactoring
" disabled for now, trying out LSP integration.
"if has("python3") && python3Version > 35
    "Plug 'davidhalter/jedi-vim', { 'for': 'python' }
"else
    "Plug 'davidhalter/jedi-vim', { 'for': 'python', 'tag': '0.10.0' }
"endif
" haskell
if executable('ghc')
    " introspection
    Plug 'eagletmt/ghcmod-vim', {'for': 'haskell'}
    " completion
    Plug 'eagletmt/neco-ghc', {'for': 'haskell'}
endif
" Golang
if executable('go')
    Plug 'fatih/vim-go', {'for': 'go'}
endif
" reStructured text
Plug 'gu-fan/riv.vim', { 'for': 'rst' }
" YAML indentation
Plug 'avakhov/vim-yaml', { 'for': 'yaml' }
" YAML folds
Plug 'digitalrounin/vim-yaml-folds', { 'for': 'yaml' }
" Jinja2 template files
Plug 'Glench/Vim-Jinja2-Syntax'
" Salt-flavored YAML (YAML + Jinja)
Plug 'saltstack/salt-vim', { 'for': 'sls' }
" Helm charts (yaml + gotmpl + sprig + custom)
Plug 'towolf/vim-helm'
" best colorscheme of them all
Plug 'altercation/vim-colors-solarized'
" lightweight alternative to Powerline
Plug 'vim-airline/vim-airline'
" additional themes for vim-airline
Plug 'vim-airline/vim-airline-themes'
" RARELY USED OR JUST FOR FUN - enable when needed
" (La)TeX goodies
"Plug 'lervag/vimtex'
" generate Powerline-like config for Tmux interface, based on vim-airline
"Plug 'edkolev/tmuxline.vim', { 'on': 'Tmuxline' }
" generate Powerline-like config for shell command line, based on vim-airline
"Plug 'edkolev/promptline.vim', { 'on': 'PromptlineSnapshot' }
" opinionated 'sensible' defaults for Vim
"Plug 'tpope/vim-sensible'
call plug#end()

" ===============
"
" PLUGIN SETTINGS
"
" ===============

" ctrlsf settings
" set search backend, can swith for e.g 'rg'
let g:ctrlsf_backend = 'ag'

" nerdcommenter settings
let g:NERDSpaceDelims = 0
let g:NERDDefaultAlign = 'left'
" Use octothorpe for comments in ini/conf files, keep ; as alternative
let g:NERDCustomDelimiters = {
    \ 'dosini': {'left': '#', 'leftAlt': ';'}
    \ }

" nerdtree settings
" filter on *.pyc files
let NERDTreeIgnore = ['\.pyc$']

" signify settings
" ignore everything but Git DVCS
let g:signify_vcs_list = [ 'git',]

" tagbar settings
let g:tagbar_width = 32

" indentline settings
let g:indentLine_color_term = 240
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

" completor settings
let g:completor_blacklist = ['tagbar', 'qf', 'netrw', 'unite', 'vimwiki', 'python']
"let g:completor_python_binary = '/usr/bin/python3'
" default filesize limiti is 1024 (1MB)
let g:completor_filesize_limit = 2048
" attempted LSP integration
"let g:completor_filetype_map = {}
"let g:completor_filetype_map.python = {'ft': 'lsp', 'cmd': 'pylsp'}

" vim-lsp settings
let g:lsp_use_native_client = 1
let g:lsp_semantic_enabled = 1
"let g:lsp_diagnostics_highlights_enabled = 0
let g:lsp_format_sync_timeout = 1000
let g:lsp_diagnostics_virtual_text_prefix = "⌦"
let g:lsp_document_code_action_signs_hint = {'text': '‣'}
if executable('pylsp')
    au User lsp_setup call lsp#register_server({
        \  'name': 'pylsp',
        \  'cmd': {server_info->['pylsp']},
        \  'allowlist': ['python'],
        \  'root_uri':{server_info->lsp#utils#path_to_uri(
        \      lsp#utils#find_nearest_parent_file_directory(
        \          lsp#utils#get_buffer_path(),
        \          [
        \           'pyproject.toml',
        \           'setup.cfg',
        \           'setup.py',
        \           'tox.ini',
        \           '.git/'
        \          ]
        \  ))},
        \  'workspace_config': {
        \        'pylsp': {
        \            'configurationSources': ['ruff'],
        \            'plugins': {
        \                'pylsp_black': {'enabled': v:true},
        \                'ruff': {'enabled': v:true},
        \                'pylsp_mypy': {'enabled': v:false},
        \            }
        \        }
        \  }
        \})
" Other possible options to pass:
" initialization_options
" blocklist
" config
endif
" folding via LSP, does not work - at least with pylsp, vim freezes
"set foldmethod=expr
"set foldexpr=lsp#ui#vim#folding#foldexpr()
"set foldtext=lsp#ui#vim#folding#foldtext()

" ale settings
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'
let g:ale_sign_info = '🛈'
let g:ale_open_list = 1
let g:ale_linters = {'python': ['flake8'],}
let g:ale_lint_on_enter = 0
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 'normal'

" python-mode settings
"let g:pymode = 1
" disable some features in favor of Jedi
"let g:pymode_rope = 0
"let g:pymode_doc = 0
" trim whitespace on save
"let g:pymode_trim_whitespaces = 1
" load some code formatting defaults
"let g:pymode_options = 1
" use PEP8-compatible indent
"let g:pymode_indent = 1
" disable advanced pymode folding, veeery slow to open on big files
"let g:pymode_folding = 0
" use pymode motions
"let g:pymode_motion = 1
" use virualenv support
"let g:pymode_virtualenv = 1
" use running the code facilities
"let g:pymode_run = 1
"let g:pymode_run_key = '<leader>r'
" use inserting breakpoints
"let g:pymode_breakpoint = 1
"let g:pymode_breakpoint_bind = '<leader>b'
" Code checking - disable (use Syntastic for this)
"let g:pymode_lint = 0
" Pymode custom syntax highlight
"let g:pymode_syntax = 1
"let g:pymode_syntax_all = 1
"let g:pymode_options_max_line_length = 79
"let g:pymode_options_colorcolumn = 1

" jedi-vim settings
" Do not use Jedi for autocompletion (using completor/neocomplete for that)
"let g:jedi#auto_initialization = 0
"let g:jedi#auto_vim_configuration = 0
"let g:jedi#popup_on_dot = 0
"let g:jedi#completions_enabled = 0
"let g:jedi#smart_auto_mappings = 0
" Set function call signatures display
" 0 - turned off
" 1 - pop-up (easier to refer to)
" 2 - vim's command line (nicer undo history)
"let g:jedi#show_call_signatures = 0
" Use tabs for go-to commands
"let g:jedi#use_tabs_not_buffers = 1
" Set the key bindings manually since the auto_initialization is disabled
"nnoremap <silent> <buffer> <localleader>d :call jedi#goto()<cr>
"nnoremap <silent> <buffer> <localleader>g :call jedi#goto_assignments()<cr>
"nnoremap <silent> <buffer> <localleader>s :call jedi#goto_stubs()<cr>
"nnoremap <silent> <buffer> <localleader>K :call jedi#show_documentation()<cr>
"nnoremap <silent> <buffer> <localleader>r :call jedi#rename()<cr>
"nnoremap <silent> <buffer> <localleader>R :call jedi#rename_keep_name()<cr>
"nnoremap <silent> <buffer> <localleader>n :call jedi#usages()<cr>

" riv.vim settings
" output path for converted file _not_ in projects
let g:riv_temp_path = 0  " the same dir as source
" highlight Python docstrings as RST
let g:riv_python_rst_hl = 1
" use this highlighting (otherwise interferes? with python highlighting)
let g:riv_highlight_code = 'python'
"do not use fixdel
let g:riv_disable_del = 1

" salt-vim settins
" Force using the Jinja2 template syntax file
let g:sls_use_jinja_syntax = 1

" Set colorscheme
set background=dark
:silent! colorscheme solarized

" vim-airline settings
let g:airline_powerline_fonts = 1
let g:airline_theme='solarized'
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#tabline#enabled = 1
" do not live-override tmux and prompt settings with airline ones
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#promptline#enabled = 0

" promptline.vim settings
"let g:promptline_theme = 'powerlineclone'
":silent! let g:promptline_preset = {
"        \'a' : [ promptline#slices#host() ],
"        \'b' : [ promptline#slices#user() ],
"        \'c' : [ promptline#slices#python_virtualenv() ],
"        \'x' : [ promptline#slices#vcs_branch(), promptline#slices#git_status(), ],
"        \'y' : [ promptline#slices#cwd({ 'dir_limit':2 }) ],
"        \'z' : [ promptline#slices#jobs() ],
"        \'warn' : [ promptline#slices#last_exit_code() ]}

"=================================
"
" KEYMAPS
"
"=================================
" vim-lsp keymaps
" register LSP-related key bindings if any LSP is registered
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> <leader>g <plug>(lsp-definition)
    "nmap <buffer> <leader>d <plug>(lsp-declaration)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> <leader>n <plug>(lsp-references)
    "nmap <buffer> <leader>i <plug>(lsp-implementation)
    "nmap <buffer> <leader>t <plug>(lsp-type-definition)
    nmap <buffer> <leader>r <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)
    " refer to doc to add more commands
    " move that to registering the respective LSP
    "autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction
augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" vim-bbye keymaps
" gracefully close buffers with vim-bbye
nnoremap <leader>q :Bdelete<CR>

" vim-fzf keymaps
" use fzf as replacement for CtrlP plugin
nnoremap <C-p> :GFiles<Cr>
nnoremap <C-P> :Files!<Cr>

" CtrlSF keymaps
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>N <Plug>CtrlSFCwordExec
nmap     <C-F>p <Plug>CtrlSFPwordPath
nmap     <C-F>P <Plug>CtrlSFPwordExec
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>

" nerdtree keymaps
map <F3> :NERDTreeTabsToggle<CR>

" TagBar keymaps
nmap <F4> :TagbarToggle<CR>

" completor keymaps
" completor LSP commands
"noremap <silent> <buffer> <localleader>d :call completor#do('definition')<CR>
"noremap <silent> <buffer> <localleader>c :call completor#do('doc')<CR>
"noremap <silent> <buffer> <localleader>f :call completor#do('format')<CR>
"noremap <silent> <buffer> <localleader>h :call completor#do('hover')<CR>

" asyncomplete keymaps
imap <c-@> <Plug>(asyncomplete_force_refresh)

" use Tab to select completion
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" key map to insert (pdb) breakpoint if no Python-mode is present
if has("python3") && python3Version > 36
    autocmd FileType python nnoremap <leader>b
            \   yyP^Cbreakpoint()  # XXX:breakpoint<Esc>
else
    autocmd FileType python nnoremap <leader>b
            \   yyP^Cimport pdb; pdb.set_trace()  # XXX:breakpoint<Esc>
endif
" key to insert rpdb breakpoint
autocmd FileType python nnoremap <leader>B
            \ yyP^Cimport rpdb; rpdb.set_trace()  # XXX:breakpoint<Esc>

" Toggle between light and dark colorscheme, dark is default
:silent! call togglebg#map("<F5>")

" turn off active search highlighting
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Disable shortcut for entering Ex mode
nnoremap Q <nop>

" Set spellcheck toggle
nmap <leader>s :setlocal spell! spelllang=en_us<CR>

" Toggle vertical centring of the cursor
nnoremap <leader>zz :let &scrolloff=999-&scrolloff<CR>:echo "scrolloff toggled"<CR>

" Paste mode toggle
set pastetoggle=<leader>p

" Toggle list mode (special characters)
noremap <leader>L :set list!<CR>

" Toggle line numbers
noremap <leader>N :set number!<CR>

" Remove trailing whitespace
noremap <leader>W :%s/\s\+$//e<CR>

" Re-tab
noremap <leader>T :retab<CR>

" Write to file anyway if having enough permissions
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" make vim understand commands without leaving ukr keyboard layout
" FIXME: DISABLED FOR NOW
" somehow in vim9 it started to intervere with insert from 0 buffer and other things
"set langmap=!\\"№\\;%?*йцукенгшщзхїфівапролджєячсмитьбюЙЦУКЕHГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ;!@#$%&*qwertyuiop[]asdfghjkl\\;'zxcvbnm\\,.QWERTYUIOP{}ASDFGHJKL:\\"ZXCVBNM<>

" add Ukr lang input, toggle in insert mode with <C-6>
set keymap=ukrainian-jcuken
" use QWERTY Eng lang by default
set iminsert=0
au BufRead * silent setlocal iminsert=0

" disable arrow keys to force working with standard HJKL movement keys
"map <up> <nop>
"map <down> <nop>
"map <left> <nop>
"map <right> <nop>

" move up and down per visual line, not real line
"nnoremap j gj
"nnoremap k gk
"nnoremap <Down> gj
"nnoremap <Up> gk

" Keys to move between windows
"nmap <silent> <C-Up> :wincmd k<CR>
"nmap <silent> <C-Down> :wincmd j<CR>
"nmap <silent> <C-Left> :wincmd h<CR>
"nmap <silent> <C-Right> :wincmd l<CR>
"map <C-h> <C-w>h
"map <C-j> <C-w>j
"map <C-k> <C-w>k
"map <C-l> <C-w>l

" USEFUL UNICODE SYMBOLS
" check marks/crosses ✅ ✓ ✔ ✗ ✘ 🗴 🗶 🗸
" more ⚠ ♨ ⚡ ⌥ ⌦ ⎇  🗲 ‣ 🛈
" Powerline symbols (from private Unicode space)
"       
