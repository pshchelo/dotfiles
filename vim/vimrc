" be iMproved!
set nocompatible

" do not force to save buffers when switching to new ones
set hidden

" disable auxillary files creation
set nobackup
set noswapfile

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                  "    case-sensitive otherwise
set hlsearch      " highlight search terms
set incsearch
" turn off active search highlighting
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Character encoding settings
set encoding=utf-8
set fileencodings=utf-8,cp1251

" Tabulation settings
set tabstop=8
set expandtab
set softtabstop=4
set shiftwidth=4
" insert tabs on the start of a line according to shiftwidth, not tabstop
set smarttab

" Show colored border column
set colorcolumn=80
" Show line numbers
set number
" Diff shows vertical split by default
set diffopt+=vertical

" alter tab settings for C files according to Python/C suggestions
fu Select_c_style()
    if search('^\t', 'n', 150)

        set shiftwidth=8
        set noexpandtab
    el 
        set shiftwidth=4
        set expandtab
    en
endf
au BufRead,BufNewFile *.c,*.h call Select_c_style()
au BufRead,BufNewFile Makefile* set noexpandtab

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw,*.pyx match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw*,.pyx,*.c,*.h match BadWhitespace /\s\+$/

" Set interaction with system clipboard and mouse
set clipboard=autoselect
set mouse=a
set mousemodel=popup_setpos

" required for Vundle
filetype off
" Vundle initialization
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" Use Vundle
Bundle 'gmarik/vundle'

" My other Bundles
Bundle 'moll/vim-bbye'
Bundle 'tpope/vim-fugitive'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'altercation/vim-colors-solarized'
Bundle 'ervandew/supertab'
Bundle 'majutsushi/tagbar'
Bundle 'klen/python-mode'
Bundle 'davidhalter/jedi-vim'
Bundle 'Rykka/riv.vim'
Bundle 'Lokaltog/vim-powerline', {'rtp': 'powerline/bindings/vim/'}
Bundle 'kien/ctrlp.vim'
"Bundle 'nvie/vim-togglemouse'
Bundle 'mileszs/ack.vim'

syntax on
filetype plugin indent on

" Higllight, indent and folding settings
"let python_highlight_all=1
filetype indent on
filetype plugin on
set foldmethod=indent
" start with all open folds
set foldlevelstart=999
set autoindent
" copy the previous indentation on autoindenting
set copyindent

" set color scheme
set background=dark
colorscheme solarized
" set gui options
set guifont=Anonymous\ Pro\ 11
set guioptions-=T  "remove toolbar
" set terminal colors
set t_Co=16

" ignore these files when searching etc
set wildignore=*.swp,*.bak,*.pyc,*.class

" leave the insert mode fatser on terminal
if ! has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

" Hide the default mode text (e.g. -- INSERT -- below the statusline)
set noshowmode

"======================
" Initialize Powerline

set laststatus=2
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

"======================
" Configure CtrlP fuzzy search

let g:ctrlp_cmd = 'CtrlPMixed'

"======================
" Jedi-vim configuration

" Change default binding of jedi's rename command
let g:jedi#rename_command = "<leader>rn"
let g:jedi#popup_select_first = 1

"======================
" Python-mode configuration

let g:pymode = 1

" disable Rope refactoring and completion support (using Jedi for this)
let g:pymode_rope = 0
" disable pymode documentation lookup (using Jedi for this)
let g:pymode_doc = 0

" trim whitespace on save
let g:pymode_trim_whitespaces = 1
" load some code formatting defaults
let g:pymode_options = 1

" use PEP8-compatible indent
let g:pymode_indent = 1
" use advanced pymode folding
let g:pymode_folding = 1
" use pymode motions
let g:pymode_motion = 1
" use virualenv support
let g:pymode_virtualenv = 1

" use running the code facilities
let g:pymode_run = 1
let g:pymode_run_key = '<leader>r'

" use inserting breakpoints
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" Code checking - disable (use Syntastic for this)
let g:pymode_lint = 0

" Pymode custom syntax highlight
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1


"======================
" Other Python-related settings

" key map to insert ipdb breakpoint
"nnoremap <leader>b yyP^Cimport ipdb; ipdb.set_trace()  # XXX:breakpoint

" key map to insert pdb breakpoint
"nnoremap <leader>b yyP^Cimport pdb; pdb.set_trace()  # XXX:breakpoint

"=========================
" Syntastic configuration

" Define nice error symbols
let g:syntastic_error_symbol='‚úó'
let g:syntastic_warning_symbol='‚ö†'

" Allways stick found errors to loclist
let g:syntastic_always_populate_loc_list=1

" Aggregate errors from all checkers
let g:syntastic_aggregate_errors=1

" Automatically close and open loclist
let g:syntastic_auto_loc_list=1

" Use flake8 as a sole checker for Python files
" Available are pep8,pep257,pyflakes,pylint,py3kwarn,python,flake8,pylama
let g:syntastic_python_checkers = ['flake8']

"=========================
" NERDTree configuration

" filter on *.pyc files in NERDTree plugin
let NERDTreeIgnore = ['\.pyc$']

" Key to toggle NERDTree sidebar
map <F3> :NERDTreeToggle<CR>

"=========================
" Tagbar configuration
let g:tagbar_width = 32

" Key to toggle TagBar sidebar
nmap <F4> :TagbarToggle<CR>

"=========================
" Riv and other RST settings

" output path for converted file NOT in projects
let g:riv_temp_path = 0  " the same dir as source

" highlight Python docstrings as RST
let g:riv_python_rst_hl = 1

" highlight code in RST as Python
let g:riv_highlight_code = 'python'

" Inserting a line belllow the current line, with the same length,
" but consisting only from the char that's given after this command.
" Useful for inserting RST headers.
nmap <leader>h yypVr

" Enable spell-check for RST files
autocmd BufNewFile,BufRead *.{txt,rst} setlocal spell spelllang=en_us

"=========================
" Working with buffers and windows

" Switch to alternate file
nmap <F9> :bnext<cr>
nmap <F8> :bprevious<cr>

" Mapping for gracefully closing buffers with vim-bbye
:nnoremap <Leader>q :Bdelete<CR>

" disable arrow keys to force working with standard HJKL movement keys
"map <up> <nop>
"map <down> <nop>
"map <left> <nop>
"map <right> <nop>

" move up and down per visual line, not real line
"nnoremap j gj
"nnoremap k gk
"nnoremap <Down> gj
"nnoremap <Up> gk

" Keys to move between windows
"nmap <silent> <C-Up> :wincmd k<CR>
"nmap <silent> <C-Down> :wincmd j<CR>
"nmap <silent> <C-Left> :wincmd h<CR>
"nmap <silent> <C-Right> :wincmd l<CR>
"map <C-h> <C-w>h
"map <C-j> <C-w>j
"map <C-k> <C-w>k
"map <C-l> <C-w>l

" make vim understand commands without leaving russian keyboard layout
" set langmap=—ë–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é;`qwertyuiop[]asdfghjkl\;'zxcvbnm\,.;–ô–¶–£–ö–ïH–ì–®–©–ó–•–™–§–´–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–ò–¢–¨–ë–Æ;QWERTYUIOP{}ASDFGHJKL:\"ZXCVBNM<>
