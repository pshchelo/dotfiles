"=========
" BEHAVIOR
"=========
" be iMproved!
set nocompatible

" do not force to save buffers when switching to new ones
set hidden
" ignore case if search pattern is all lowercase, case-sensitive otherwise
set smartcase
" use incremental search
set incsearch

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
"
" leave the insert mode fatser on terminal
if ! has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

"==========================
" TABS, INDENTS AND FOLDING
"==========================
filetype plugin indent on
set tabstop=8
set expandtab
set softtabstop=4
set shiftwidth=4
" insert tabs on the start of a line according to shiftwidth, not tabstop
set smarttab

set foldmethod=indent
" start with all open folds
set foldlevelstart=999
set autoindent
 " copy the previous indentation on autoindenting
set copyindent

" alter tab settings for C files according to Python/C suggestions
fu Select_c_style()
    if search('^\t', 'n', 150)
        set shiftwidth=8
        set noexpandtab
    el
        set shiftwidth=4
        set expandtab
    en
endf
autocmd BufRead,BufNewFile *.c,*.h call Select_c_style()
autocmd BufRead,BufNewFile Makefile* set noexpandtab

"========
" VISUALS
"========
syntax on
" Show colored border column
set colorcolumn=80
" Show line numbers
set number
" Diff shows vertical split by default
set diffopt+=vertical
" set show matching parenthesis
set showmatch
" highlight search terms
set hlsearch

" Hide the default mode text (e.g. -- INSERT -- below the statusline)
set noshowmode

" set gui options
" set guifont=Anonymous\ Pro\ for\ Powerline\ 12
set guioptions-=T  "remove toolbar
" set terminal colors
set t_Co=16

" Set interaction with system clipboard and mouse
set clipboard=unnamedplus
set mouse=a
set mousemodel=popup_setpos
" Always show status line
set laststatus=2

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" nice chars for displaying special symbols with ':set list'
set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:¶,precedes:«,extends:»

"================
" FILES AND TYPES
"================
" disable auxillary files creation
set nobackup
set noswapfile

" ignore these files when searching etc
set wildignore=*.swp,*.bak,*.pyc,*.class

" Character encoding settings
set encoding=utf-8
set fileencodings=utf-8,cp1251

" PYTHON
" Display tabs at the beginning of a line in Python mode as bad.
autocmd BufRead,BufNewFile *.py,*.pyw,*.pyx match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
autocmd BufRead,BufNewFile *.py,*.pyw*,.pyx,*.c,*.h match BadWhitespace /\s\+$/
" Trim trailing whitespace on save for Python and C files
autocmd BufWritePre *.py,*.pyw*,.pyx,*.c,*.h :%s/\s\+$//e

" RST and TXT
" Enable spell-check for RST and plain text files
autocmd BufNewFile,BufRead *.{txt,rst} setlocal spell spelllang=en_us
" Make trailing whitespace be flagged as bad for RST files
autocmd BufRead,BufNewFile *.rst match BadWhitespace /\s\+$/
" Trim trailing whitespace on save for RST files
autocmd BufWritePre *.rst :%s/\s\+$//e

" YAML
" treat *.hot OpenStack Orchestration (Heat) templates as YAML
autocmd BufRead,BufNewFile *.hot set filetype=yaml
" set indent settings for yaml files
autocmd Filetype yaml setlocal ts=2 sw=2 expandtab
" Make trailing whitespace be flagged as bad for YAML files
autocmd BufRead,BufNewFile *.yaml,*.yml,*.hot match BadWhitespace /\s\+$/
" Trim trailing whitespace on save for YAML files
autocmd BufWritePre *.yaml,*.yml,*.hot :%s/\s\+$//e

" Config files
" treat *.conf files as in dosini format
autocmd BufRead,BufNewFile *.conf set filetype=dosini

"=================================
"
" AUTO CORRECT
"
"=================================
function! AutoCorrect()
    ia ixpe ipxe
    ia iXPE iPXE
endfunction

autocmd filetype text call AutoCorrect()
autocmd filetype rst call AutoCorrect()

"=================================
"
" PLUGINS
"
"=================================
"=====
" Plug
"=====
call plug#begin()
"
" GENARAL VIM GOODIES
"
" close files instead of closing views
Plug 'moll/vim-bbye'
" command line fuzzy file search and open
Plug 'ctrlpvim/ctrlp.vim'
" ack/ag integration
"Plug 'mileszs/ack.vim'
" async ag-based search
if exists("*winlayout")
    Plug 'dyng/ctrlsf.vim'
else
    " the last commit that is not using winlayout() function
    " which is available only since 8.1.0307
    Plug 'dyng/ctrlsf.vim', { 'commit': '3f33f5e7689a0e4c7dcd6c3c277b709c8468ceee'}
endif
" multiple cursors
Plug 'terryma/vim-multiple-cursors'
" pairs of commands
Plug 'tpope/vim-unimpaired'
" repeat full actions from plugins via .
Plug 'tpope/vim-repeat'
" work with surrounding quotes/braces/tags
Plug 'tpope/vim-surround'
" nicer (un)comment commands
Plug 'scrooloose/nerdcommenter'
" sidebar file browser + in single panel
Plug 'jistr/vim-nerdtree-tabs' | Plug 'scrooloose/nerdtree'
" use vimdiff on folders!
Plug 'will133/vim-dirdiff'
" Paste/fetch text from LodgeIt pastebins, defaults to paste.openstack.org
Plug 'pshchelo/lodgeit.vim'
"
" GIT INTEGRATION

" Git integration
Plug 'tpope/vim-fugitive'
" display git status per line in buffer, stage/instage hunks, integrates with vim-airline
"Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-signify'

" GENRAL PROGRAMMING
"
" sidebar code structure browser, requires exuberant-tags to be installed
Plug 'majutsushi/tagbar', { 'on':  'TagbarToggle' }

" autocompletion
if v:version < 800
    " auto-complete, supports Jedi for Python code
    Plug 'Shougo/neocomplete' | Plug 'Konfekt/FastFold'
else
    " async auto-complete
    Plug 'maralla/completor.vim'
endif

" code and style linters
if v:version < 800
    " code and style checks
    Plug 'scrooloose/syntastic'
else
    " async linter
    Plug 'w0rp/ale'
endif

" PYTHON SUPPORT
"
" Python goodies - disabled for now, conflicts with Jedi, trying to compensate
" with other plugins
" Plug 'python-mode/python-mode', { 'branch': 'develop', 'for': 'python' }
" better Python motion objects
Plug 'jeetsukumaran/vim-pythonsense'
" better python indentation
Plug 'vim-scripts/indentpython.vim'

" Python code completion and refactoring
if has("python3")
" define python3Version (MAJ.MIN) variable
python3 << ENDPYTHON
import sys, vim
vim.command("let python3Version = %s%s" % (str(sys.version_info.major), str(sys.version_info.minor)))
ENDPYTHON
endif

" rely on lazy eval
if has("python3") && python3Version > 35
    Plug 'davidhalter/jedi-vim', { 'for': 'python' }
else
    Plug 'davidhalter/jedi-vim', { 'for': 'python', 'tag': '0.10.0' }
endif


if executable('ghc')
    " HASKELL SUPPORT
    " introspection
    Plug 'eagletmt/ghcmod-vim', {'for': 'haskell'}
    " completion
    Plug 'eagletmt/neco-ghc', {'for': 'haskell'}
endif

if executable('go')
    " GO SUPPORT
    Plug 'fatih/vim-go', {'for': 'go'}
endif
"
" MARKUP LANGUAGES SUPPORT
"
" reStructured text
Plug 'gu-fan/riv.vim', { 'for': 'rst,python' }
" YAML indentation
Plug 'avakhov/vim-yaml', { 'for': 'yaml' }
" YAML folds
Plug 'digitalrounin/vim-yaml-folds', { 'for': 'yaml' }
" Jinja2 template files
Plug 'Glench/Vim-Jinja2-Syntax'
" Salt-flavored YAML (YAML + Jinja)
Plug 'saltstack/salt-vim', { 'for': 'sls' }
" Helm charts (yaml + gotmpl + sprig + custom)
Plug 'towolf/vim-helm'
"
" VISUALS
"
" best colorscheme of them all
Plug 'altercation/vim-colors-solarized'
" lightweight alternative to Powerline
Plug 'vim-airline/vim-airline'
" additional themes for vim-airline
Plug 'vim-airline/vim-airline-themes'
"
" RARELY USED OR JUST FOR FUN
" enable when needed
"
" generate Powerline-like config for Tmux interface, based on vim-airline
"Plug 'edkolev/tmuxline.vim', { 'on': 'Tmuxline' }
" generate Powerline-like config for shell command line, based on vim-airline
"Plug 'edkolev/promptline.vim', { 'on': 'PromptlineSnapshot' }
" Online REPL sidepanel
"Plug 'metakirby5/codi.vim', { 'on': 'Codi' }
" interact with JSON-based REST APIs
"Plug 'diepm/vim-rest-console', { 'for': 'rest' }
"" (La)TeX goodies
"Plug 'lervag/vimtex'
"" opinionated 'sensible' defaults for Vim
"Plug 'tpope/vim-sensible'
" indentation visual guides - must figure out proper colors for Solarized yet
"Plug 'nathanaelkane/vim-indent-guides'
"hi IndentGuidesOdd  ctermbg=darkgrey
"hi IndentGuidesEven ctermbg=lightgrey
"let g:indent_guides_guide_size = 1
call plug#end()

"========
" Signify
"========
let g:signify_vcs_list = [ 'git',]

"==========
" Solarized
"==========
set background=dark
:silent! colorscheme solarized
:silent! call togglebg#map("<F5>")

"=====
"Ack
"=====
if executable('ag')
    let g:ackprg = 'ag --vimgrep --smart-case'
    cnoreabbrev ag Ack
    cnoreabbrev aG Ack
    cnoreabbrev Ag Ack
    cnoreabbrev AG Ack
endif
let g:ackhighlight = 1

"======
"CtrlSF
"======
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>N <Plug>CtrlSFCwordExec
nmap     <C-F>p <Plug>CtrlSFPwordPath
nmap     <C-F>P <Plug>CtrlSFPwordExec
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>

"=====
"CtrlP
"=====
let g:ctrlp_cmd = 'CtrlPMixed'

"=====
" Jedi
"=====
" Do not use Jedi for autocompletion (using completor/neocomplete for that)
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
let g:jedi#smart_auto_mappings = 0

" Change default binding of jedi's rename command
let g:jedi#rename_command = "<leader>rn"
" Set function call signatures display
" 0 - turned off
" 1 - pop-up (easier to refer to)
" 2 - vim's command line (nicer undo history)
let g:jedi#show_call_signatures = 1
" Use tabs for go-to commands
let g:jedi#use_tabs_not_buffers = 1

if v:version < 800
"============
" Neocomplete
"============
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    " Python / jedi-vim completion
    autocmd FileType python setlocal omnifunc=jedi#completions
    if !exists('g:neocomplete#force_omni_input_patterns')
        let g:neocomplete#force_omni_input_patterns = {}
    endif
    let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
    " Other completions (builtin)
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    " Key-mappings are in keymaps.vim
else
"============
" Completor
"============
    let g:completor_python_binary = '/usr/bin/python3'
    let g:completor_filesize_limit = 2048 " default is 1024 == 1MB
endif

"============
" Python-mode - DISABLED!
"============
"let g:pymode = 1

" disable some features in favor of Jedi
"let g:pymode_rope = 0
"let g:pymode_doc = 0

" trim whitespace on save
"let g:pymode_trim_whitespaces = 1
" load some code formatting defaults
"let g:pymode_options = 1

" use PEP8-compatible indent
"let g:pymode_indent = 1
" disable advanced pymode folding, veeery slow to open on big files
"let g:pymode_folding = 0
" use pymode motions
"let g:pymode_motion = 1
" use virualenv support
"let g:pymode_virtualenv = 1

" use running the code facilities
"let g:pymode_run = 1
"let g:pymode_run_key = '<leader>r'

" use inserting breakpoints
"let g:pymode_breakpoint = 1
"let g:pymode_breakpoint_bind = '<leader>b'

" Code checking - disable (use Syntastic for this)
"let g:pymode_lint = 0

" Pymode custom syntax highlight
"let g:pymode_syntax = 1
"let g:pymode_syntax_all = 1
"let g:pymode_options_max_line_length = 79
"let g:pymode_options_colorcolumn = 1

if v:version < 800
"==========
" Syntastic
"==========
    " Define nice error symbols
    let g:syntastic_error_symbol='✗'
    let g:syntastic_warning_symbol='⚠'

    " Allways stick found errors to loclist
    let g:syntastic_always_populate_loc_list=1
    " Automatically close and open loclist
    let g:syntastic_auto_loc_list=1
    " Aggregate errors from all checkers
    let g:syntastic_aggregate_errors=1

    " Use flake8 as a sole checker for Python files
    " Available are pep8,pep257,pyflakes,pylint,py3kwarn,python,flake8,pylama
    let g:syntastic_python_checkers = ['flake8']
else
"=========
" ALE
"=========
     let g:airline#extensions#ale#enabled = 1
     let g:ale_sign_error = '✗'
     let g:ale_sign_warning = '⚠'
     let g:ale_open_list = 1
     let g:ale_linters = {'python': ['flake8'],}
     let g:ale_lint_on_enter = 0
     let g:ale_lint_on_insert_leave = 1
     let g:ale_lint_on_text_changed = 'normal'
endif

"========================
" NERDTree / NERDTreeTabs
"========================

" filter on *.pyc files in NERDTree plugin
let NERDTreeIgnore = ['\.pyc$']

" Key to toggle NERDTree sidebar
map <F3> :NERDTreeTabsToggle<CR>

"=============
"NERDCommenter
"=============
let g:NERDSpaceDelims = 0
let g:NERDDefaultAlign = 'left'
" Use octothorpe for comments in ini/conf files, keep ; as alternative
let g:NERDCustomDelimiters = {
    \ 'dosini': {'left': '#', 'leftAlt': ';'}
    \ }

"=======
" Tagbar
"=======
let g:tagbar_width = 32

" Key to toggle TagBar sidebar
nmap <F4> :TagbarToggle<CR>

"====
" Riv
"====
" output path for converted file _not_ in projects
let g:riv_temp_path = 0  " the same dir as source

" highlight Python docstrings as RST
let g:riv_python_rst_hl = 1
" use this highlighting (otherwise interferes? with python highlighting)
let g:riv_highlight_code = 'python'
"do not use fixdel
let g:riv_disable_del = 1

"========
"Salt-Vim
"========
" Force using the Jinja2 template syntax file
let g:sls_use_jinja_syntax = 1

"========
" Airline
"========
let g:airline_powerline_fonts = 1
let g:airline_theme='solarized'
" do not live-override tmux settings with airline ones
let g:airline#extensions#tmuxline#enabled = 0
" do not live-override prompt settings with airline ones
let g:airline#extensions#promptline#enabled = 0
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#tabline#enabled = 1

"===========
" Promptline
"===========
"
let g:promptline_theme = 'powerlineclone'
:silent! let g:promptline_preset = {
        \'a' : [ promptline#slices#host() ],
        \'b' : [ promptline#slices#user() ],
        \'c' : [ promptline#slices#python_virtualenv() ],
        \'x' : [ promptline#slices#vcs_branch(), promptline#slices#git_status(), ],
        \'y' : [ promptline#slices#cwd({ 'dir_limit':2 }) ],
        \'z' : [ promptline#slices#jobs() ],
        \'warn' : [ promptline#slices#last_exit_code() ]}


"=================================
"
" KEYMAPS
"
"=================================
" turn off active search highlighting
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Mapping for gracefully closing buffers with vim-bbye
:nnoremap <Leader>q :Bdelete<CR>

" Disable shortcut for entering Ex mode
nnoremap Q <nop>

" Set spellcheck toggle
nmap <Leader>s :setlocal spell! spelllang=en_us<CR>

" Toggle vertical centring of the cursor
nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>:echo "scrolloff toggled"<CR>

" Neocomplete
" <CR>: close popup
 if v:version < 800
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return pumvisible() ? "\<C-y>" : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
else
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"
endif

" Paste mode toggle
set pastetoggle=<Leader>p

" Toggle list mode (special characters)
noremap <Leader>L :set list!<CR>

" Toggle line numbers
noremap <Leader>N :set number!<CR>

" Write to file anyway if having enough permissions
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" disable arrow keys to force working with standard HJKL movement keys
"map <up> <nop>
"map <down> <nop>
"map <left> <nop>
"map <right> <nop>

" move up and down per visual line, not real line
"nnoremap j gj
"nnoremap k gk
"nnoremap <Down> gj
"nnoremap <Up> gk

" Keys to move between windows
"nmap <silent> <C-Up> :wincmd k<CR>
"nmap <silent> <C-Down> :wincmd j<CR>
"nmap <silent> <C-Left> :wincmd h<CR>
"nmap <silent> <C-Right> :wincmd l<CR>
"map <C-h> <C-w>h
"map <C-j> <C-w>j
"map <C-k> <C-w>k
"map <C-l> <C-w>l

" key map to insert pdb breakpoint if no Python-mode is present
autocmd FileType python nnoremap <leader>b yyP^Cimport pdb; pdb.set_trace()  # XXX:breakpoint<Esc>
" newer variant, supported by  Python 3.7+
autocmd FileType python nnoremap <leader>B yyP^Cbreakpoint()  # XXX:breakpoint<Esc>

" make vim understand commands without leaving russian keyboard layout
"set langmap=!\\"№\\;%?*ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕHГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ;!@#$%&*`qwertyuiop[]asdfghjkl\\;'zxcvbnm\\,.~QWERTYUIOP{}ASDFGHJKL:\\"ZXCVBNM<>

" USEFUL UNICODE SYMBOLS
" check marks/crosses ✅ ✓ ✔ ✗ ✘ 🗴 🗶 🗸
" more ⚠ ♨ ⚡ ⌥ ⌦ ⎇ 🗲
" Powerline symbols (from private Unicode space)
"       
