#!/usr/bin/env bash

# make tunnels for OpenStack public API and default floating IP networks
# of MOSK dev cluster
HOSTSFILE=/etc/hosts
CURRENT_CONTEXT=$(kubectl config current-context)
CONTEXT=${1:-$CURRENT_CONTEXT}
CLUSTER=$(kubectl config view  -o jsonpath="{.contexts[?(@.name == \"$CONTEXT\")].context.cluster}")
K8S_IP=$(kubectl config view -o jsonpath="{.clusters[?(@.name == \"$CLUSTER\")].cluster.server}" | awk -F ":" "{print \$2}" | cut -c3-)
OS_PUBLIC_NETWORK_NAME="public"
SSH_KEY="~/.ssh/aio_rsa"
SSH_USER="ubuntu"

echo discoverung openstack services cluserIP range
cluster_ip_range=$(kubectl -n metallb get ipaddresspools openstack-default -ojsonpath='{.spec.addresses[0]}')
# TODO: the range may not specifically translate to single CIDR (e.g. default is ...100-...255)
# proxy specific discovered hosts only? 
CLUSTER_CIDR="$(echo $cluster_ip_range | awk -F '-' '{print $1}')/24"

echo discovering hosts and IP of OpenStack APIs
hosts=()
ingress_lb_ip=$(kubectl --context $CONTEXT -n openstack get svc ingress -ojsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found)
if [[ -n ${ingress_lb_ip} ]]; then
    for ns in "openstack" "rook-ceph"; do
        for svc in $(kubectl --context $CONTEXT -n $ns get ingress -ojsonpath='{.items[*].spec.rules[*].host}'); do
            if grep ${svc} /etc/hosts > /dev/null; then
                echo "ERROR: entry for ${svc} is already in /etc/hosts file."
                echo "File was not properly restored from backup or parallel $(basename $0) session is running."
                exit 1
            else
                hosts+=("${ingress_lb_ip} ${svc}")
            fi
        done
    done
fi

echo discovering hosts and IP of Keycloak
keycloak_ip=$(kubectl --context $CONTEXT -n iam get svc openstack-iam-keycloak-http -ojsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found)
if [[ -z ${keycloak_ip} ]]; then
    # older iam chart was using openstack-iam-keyclo-http as service name
    keycloak_ip=$(kubectl --context $CONTEXT -n iam get svc openstack-iam-keyclo-http -ojsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found)
fi
if [[ -n ${keycloak_ip} ]]; then
    keycloak_domain_record=$(kubectl --context $CONTEXT -n coredns get cm coredns-coredns -oyaml | grep keycloak | awk '{print $1}')
    # keycloak_domain_record has dot (.) in the end since it is a proper DNS record
    hosts+=("${keycloak_ip} ${keycloak_domain_record%?}")
else
    echo no Keycloak seems to be installed
fi

echo discovering StackLight services
prometheus_ip=$(kubectl --context $CONTEXT -n stacklight get svc prometheus-server -ojsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found)
if [[ -n ${prometheus_ip} ]]; then
    hosts+=("$prometheus_ip prometheus-server.stacklight")
else
    echo no StackLight seems to be installed
fi

echo discovering network address of IPv4 subnet of OpenStack network named ${OS_PUBLIC_NETWORK_NAME}
PUBLIC_CIDR=$(kubectl --context $CONTEXT -n openstack exec deploy/keystone-client -c keystone-client -- openstack subnet list --ip-version 4 --network $OS_PUBLIC_NETWORK_NAME -f value -c Subnet)

if [ $(pgrep -f "sshuttle.*${CLUSTER_CIDR}.*${PUBLIC_CIDR}") ]; then
    echo another instance of ${0} proxying the same networks ${CLUSTER_CIDR} and ${PUBLIC_CIDR} is running!
    exit 1
fi

echo backing up $HOSTSFILE
sudo cp $HOSTSFILE $HOSTSFILE.mosk.bak

echo appending to $HOSTSFILE:
printf "%s\n" "${hosts[@]}" | sudo tee -a $HOSTSFILE

echo sshuttle to ${K8S_IP}, access ${CLUSTER_CIDR} for k8s cluster network and ${PUBLIC_CIDR} for OpenStack public network
SSH_ARGS="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ${SSH_KEY} -l ${SSH_USER}"
sshuttle -e "${SSH_ARGS}" ${CLUSTER_CIDR} ${PUBLIC_CIDR} -r ${K8S_IP}

# TODO: make restoring hosts file an exit trap
echo restoring $HOSTSFILE from backup
sudo mv $HOSTSFILE.mosk.bak $HOSTSFILE
echo $HOSTSFILE is restored
