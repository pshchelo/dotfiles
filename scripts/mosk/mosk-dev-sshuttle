#!/usr/bin/env bash

# make tunnels for OpenStack public API and default floating IP networks
# of MOSK dev cluster

HOSTSFILE=/etc/hosts
CURRENT_CONTEXT=$(kubectl config current-context)
CONTEXT=${1:-$CURRENT_CONTEXT}
CLUSTER=$(kubectl config view  -o jsonpath="{.contexts[?(@.name == \"$CONTEXT\")].context.cluster}")
K8S_IP=$(kubectl config view -o jsonpath="{.clusters[?(@.name == \"$CLUSTER\")].cluster.server}" | awk -F ":" "{print \$2}" | cut -c3-)
OS_PUBLIC_NETWORK_NAME="public"
# TODO: discover this cidr somehow
CLUSTER_CIDR="10.172.1.0/24"
SSH_KEY="~/.ssh/aio_rsa"
SSH_USER="ubuntu"

echo discovering hosts and IP of OpenStack APIs
hosts=()
ingress_lb_ip=$(kubectl --context $CONTEXT -n openstack get svc ingress -ojsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found)
if [ -n ${ingress_lb_ip} ]; then
    for svc in $(kubectl --context $CONTEXT -n openstack get ingress -ojsonpath='{.items[*].spec.rules[*].host}'); do
        hosts+=("${ingress_lb_ip} ${svc}")
    done
fi
echo discovering hosts and IP of Keycloak
keycloak_ip=$(kubectl --context $CONTEXT -n iam get svc openstack-iam-keyclo-http -ojsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found)
if [ -n ${keycloak_ip} ]; then
    keycloak_domain_record=$(kubectl --context $CONTEXT -n coredns get cm coredns-coredns -oyaml | grep keycloak | awk '{print $1}')
    # keycloak_domain_record has dot (.) in the end since it is a proper DNS record
    hosts+=("${keycloak_ip} ${keycloak_domain_record%?}")
else
    echo no Keycloak seems to be installed
fi

echo discovering network address of IPv4 subnet of OpenStack network named \"${OS_PUBLIC_NETWORK_NAME}\"
PUBLIC_CIDR=$(kubectl --context $CONTEXT -n openstack exec deploy/keystone-client -c keystone-client -- openstack subnet list --ip-version 4 --network $OS_PUBLIC_NETWORK_NAME -f value -c Subnet)

sudo -v

echo backing up $HOSTSFILE
sudo cp $HOSTSFILE $HOSTSFILE.mosk.bak

echo appending to $HOSTSFILE:
printf "%s\n" "${hosts[@]}" | sudo tee -a $HOSTSFILE

echo sshuttle to ${K8S_IP}, access ${CLUSTER_CIDR} for k8s cluster network and ${PUBLIC_CIDR} for OpenStack public network
SSH_ARGS="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ${SSH_KEY} -l ${SSH_USER}"

sshuttle -e "${SSH_ARGS}" ${CLUSTER_CIDR} ${PUBLIC_CIDR} -r ${K8S_IP}

echo restoring $HOSTSFILE
sudo mv $HOSTSFILE.mosk.bak $HOSTSFILE
