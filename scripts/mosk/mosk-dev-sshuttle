#!/usr/bin/env bash
# TODO: add toggle to NOT do sshuttle, and only edit /etc/hosts as needed
# our phys hw labs have both API and FIP nets on internal network, so no need
# to tunnel

# make tunnels for OpenStack public API and default floating IP networks
# of MOSK dev cluster
if [ "$(uname)" == "Darwin" ]; then
    HOSTSFILE=/private/etc/hosts
    IFACE="en0"
else
    HOSTSFILE=/etc/hosts
fi

OS_PUBLIC_NETWORK_NAME="public"
# defaults for virtual labs
SSH_KEY="${HOME}/.ssh/aio_rsa"
SSH_USER="ubuntu"
USER_CONTEXT=$1
DO_SSHUTTLE=True

# pre-auth sudo right away
sudo -v

# passing all the args to echo verbatim
# shellcheck disable=SC2068
function errcho { >&2 echo $@; }

function discover_hosts {
    CURRENT_CONTEXT=$(kubectl config current-context)
    CONTEXT=${USER_CONTEXT:-$CURRENT_CONTEXT}
    errcho -n "discovering hosts and IP of OpenStack APIs... "
    local hosts=""
    ingress_lb_ip=$(kubectl --context "$CONTEXT" -n openstack get svc ingress -ojsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found)
    if [[ -n ${ingress_lb_ip} ]]; then
        for ns in "openstack" "rook-ceph"; do
            for svc in $(kubectl --context "$CONTEXT" -n $ns get ingress -ojsonpath='{.items[*].spec.rules[*].host}'); do
                hosts+="${ingress_lb_ip} ${svc};"
            done
        done
    fi
    errcho "OK"
    errcho -n "discovering hosts and IP of Keycloak... "
    keycloak_ip=$(kubectl --context "$CONTEXT" -n iam get svc openstack-iam-keycloak-http -ojsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found)
    if [[ -z ${keycloak_ip} ]]; then
        # older iam chart was using openstack-iam-keyclo-http as service name
        keycloak_ip=$(kubectl --context "$CONTEXT" -n iam get svc openstack-iam-keyclo-http -ojsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found)
    fi
    if [[ -n ${keycloak_ip} ]]; then
        keycloak_domain_record=$(kubectl --context "$CONTEXT" -n coredns get cm coredns-coredns -oyaml | grep keycloak | awk '{print $1}')
        # keycloak_domain_record has dot (.) in the end since it is a proper DNS record
        hosts+="${keycloak_ip} ${keycloak_domain_record%?};"
        errcho "OK"
    else
        errcho "NO"
    fi

    errcho -n "discovering StackLight services... "
    grafana_ip=$(kubectl --context "$CONTEXT" -n stacklight get svc grafana -ojsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found)
    if [[ -n ${grafana_ip} ]]; then
        hosts+="$grafana_ip grafana.stacklight;"
        errcho "OK"
    else
        errcho "NO"
    fi
    prometheus_ip=$(kubectl --context "$CONTEXT" -n stacklight get svc prometheus-server -ojsonpath='{.status.loadBalancer.ingress[0].ip}' --ignore-not-found)
    if [[ -n ${prometheus_ip} ]]; then
        hosts+="$prometheus_ip prometheus-server.stacklight;"
    fi
    echo "$hosts"
}

function set_network_access_vars {
    CURRENT_CONTEXT=$(kubectl config current-context)
    CONTEXT=${USER_CONTEXT:-$CURRENT_CONTEXT}
    CLUSTER=$(kubectl config view  -o jsonpath="{.contexts[?(@.name == \"$CONTEXT\")].context.cluster}")
    K8S_IP=$(kubectl config view -o jsonpath="{.clusters[?(@.name == \"$CLUSTER\")].cluster.server}" | awk -F ":" "{print \$2}" | cut -c3-)

    errcho -n "discoverung openstack services cluserIP range... "
    # virtual labs have 'metallb' ns, phys labs have 'metallb-system' ns
    metallb_ns=$(kubectl --context "$CONTEXT" get ns -ocustom-columns=NAME:metadata.name | grep ^metal)
    # virtual labs have 'openstack-default' pool, phys labs have 'default' pool
    ippool=$(kubectl --context "$CONTEXT" -n "$metallb_ns" get ipaddresspools -ocustom-columns=NAME:metadata.name | grep default)

    if [ "$ippool" = "default" ]; then
        SSH_KEY="./ssh_key"
        SSH_USER="mcc-user"
    fi

    cluster_ip_range=$(kubectl --context "$CONTEXT" -n "$metallb_ns" get ipaddresspools "$ippool" -ojsonpath='{.spec.addresses[0]}')
    # TODO: the range may not specifically translate to single CIDR (e.g. default is ...100-...255)
    # proxy specific discovered hosts only?
    CLUSTER_CIDR="$(echo "$cluster_ip_range" | awk -F '-' '{print $1}')/24"
    errcho "OK"

    errcho -n "discovering network address of IPv4 subnet of OpenStack network named ${OS_PUBLIC_NETWORK_NAME}... "
    PUBLIC_CIDR=$(kubectl --context "$CONTEXT" -n openstack exec deploy/keystone-client -c keystone-client -- openstack subnet list --ip-version 4 --network "$OS_PUBLIC_NETWORK_NAME" -f value -c Subnet)
    errcho "OK"
}

function add_routes {
    local iface=$1
    sudo route add "$PUBLIC_CIDR" -interface "$iface"
    sudo route add "$CLUSTER_CIDR" -interface "$iface"
}

function delete_routes {
    local iface=$1
    sudo route delete "$PUBLIC_CIDR" -interface "$iface"
    sudo route delete "$CLUSTER_CIDR" -interface "$iface"
}

function patch_hosts_file {
    local hosts_str=$1
    local OLD_IFS=$IFS
    IFS=';'
    read -ra patched_hosts <<< "$hosts_str"
    IFS=$OLD_IFS
    for svc in "${patched_hosts[@]}"; do
        if grep "${svc}" /etc/hosts > /dev/null; then
            echo "ERROR: entry for ${svc} is already in /etc/hosts file."
            echo "File was not properly restored from backup or parallel $(basename "$0") session is running."
            exit 1
        fi
    done

    echo "backing up $HOSTSFILE... "
    sudo cp $HOSTSFILE $HOSTSFILE.mosk.bak
    echo "OK"

    echo appending to $HOSTSFILE:
    echo
    printf "%s\n" "${patched_hosts[@]}" | sudo tee -a $HOSTSFILE
    echo
}

function restore_hosts_file {
    # TODO: make restoring hosts file an exit trap
    echo "restoring $HOSTSFILE from backup... "
    sudo mv $HOSTSFILE.mosk.bak $HOSTSFILE
    echo "OK"
}

if [ "$DO_SSHUTTLE" = "True" ]; then
    # sets K8S_IP, CLUSTER_CIDR and PUBLIC_CIDR vars,
    # may also redefine SSH_KEY and SSH_USER
    set_network_access_vars
fi
patch_hosts_file "$(discover_hosts)"
if [ "$DO_SSHUTTLE" = "True" ]; then
    if [ $(pgrep -f "sshuttle.*${CLUSTER_CIDR}.*${PUBLIC_CIDR}") ]; then
        errcho "another instance of ${0} proxying the same networks ${CLUSTER_CIDR} and ${PUBLIC_CIDR} is running!"
        exit 1
    fi
    errcho "sshuttle to ${K8S_IP}, access ${CLUSTER_CIDR} for k8s cluster network and ${PUBLIC_CIDR} for OpenStack public network"
    SSH_ARGS="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -i ${SSH_KEY} -l ${SSH_USER}"
    # sshuttle_line is meant to be word-split
    # shellcheck disable=SC2086
    if [ "$(uname)" == "Darwin" ]; then
        add_routes "$IFACE"
    fi
    sshuttle "$CLUSTER_CIDR" "$PUBLIC_CIDR" -r "$K8S_IP" --ssh-cmd "$SSH_ARGS"
    if [ "$(uname)" == "Darwin" ]; then
        delete_routes "$IFACE"
    fi
else
    read -p "Press Enter to restore $HOSTSFILE" -n 1 -r
fi
restore_hosts_file
